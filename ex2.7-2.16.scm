;;ex 2.7
(define (make-interval a b) (cons a b))

(define (upper-bound interval) (cdr interval))

(define (lower-bound interval) (car interval))

(define (add-interval a b)
  (make-interval (+ (lower-bound a) (lower-bound b))
		 (+ (upper-bound a) (upper-bound b))))

(define (mul-interval a b)
  (let ((p1 (* (lower-bound a) (lower-bound b)))
	(p2 (* (lower-bound a) (upper-bound b)))
	(p3 (* (upper-bound a) (lower-bound b)))
	(p4 (* (upper-bound a) (upper-bound b))))
    (make-interval (min p1 p2 p3 p4)
		   (max p1 p2 p3 p4))))

(define (div-interval a b)
  (mul-interval a
		(make-interval (/ 1.0 (upper-bound b))
			       (/ 1.0 (lower-bound b)))))

(define (display-interval a)
  (newline)
  (display "[")
  (display (lower-bound a))
  (display ",")
  (display (upper-bound a))
  (display "]")
  (newline))

;;ex 2.8
(define (sub-interval a b)
  (make-interval (- (lower-bound a) (upper-bound b))
		 (- (upper-bound a) (lower-bound b))))

(define interval-a (make-interval 3 5))
(define interval-b (make-interval 7 10))

(display-interval interval-a)

(display-interval (add-interval interval-a interval-b))
(display-interval (sub-interval interval-a interval-b))
(display-interval (div-interval interval-a interval-b))

;;ex 2.9
(define (width-interval a)
  (/ (- (upper-bound a) (lower-bound a))
     2))

(width-interval (add-interval interval-a interval-b))
(width-interval (sub-interval interval-a interval-b))
(width-interval (mul-interval interval-a interval-b))
(width-interval (div-interval interval-a interval-b))
(+ (width-interval interval-a)
   (width-interval interval-b))

;;ex 2.10
(define (div-interval-aug a b)
  (if (and (negative? (lower-bound b))
	   (positive? (upper-bound b)))
      (begin (display "divide by zero not defined")
	     (make-interval 0 0))
      (div-interval a b)))

(define interval-c (make-interval -3 6))

(display-interval (div-interval-aug interval-a interval-c))

;;ex 2.11
(define (mul-interval-aug a b)
  (cond ((and (positive? (lower-bound a))
	      (positive? (upper-bound a))
	      (positive? (lower-bound b))
	      (positive? (upper-bound b)))
	 (make-interval (* (lower-bound a) (lower-bound b))
			(* (upper-bound a) (upper-bound b))))
	((and (positive? (lower-bound a))
	      (positive? (upper-bound a))
	      (negative? (lower-bound b))
	      (positive? (upper-bound b)))
	 (make-interval (* (upper-bound a) (lower-bound b))
			(* (upper-bound a) (upper-bound b))))
	((and (positive? (lower-bound a))
	      (positive? (upper-bound a))
	      (negative? (lower-bound b))
	      (negative? (upper-bound b)))
	 (make-interval (* (upper-bound a) (lower-bound b))
			(* (lower-bound a) (upper-bound b))))
	((and (negative? (lower-bound a))
	      (positive? (upper-bound a))
	      (positive? (lower-bound b))
	      (positive? (upper-bound b)))
	 (make-interval (* (lower-bound a) (upper-bound b))
			(* (upper-bound a) (upper-bound b))))
	((and (negative? (lower-bound a))
	      (positive? (upper-bound a))
	      (negative? (lower-bound b))
	      (positive? (upper-bound b)))
	 (make-interval (min (* (lower-bound a) (upper-bound b))
			     (* (upper-bound a) (lower-bound b)))
			(max (* (upper-bound a) (upper-bound b))
			     (* (lower-bound a) (lower-bound b)))))
	((and (negative? (lower-bound a))
	      (positive? (upper-bound a))
	      (negative? (lower-bound b))
	      (negative? (upper-bound b)))
	 (make-interval (* (upper-bound a) (lower-bound b))
			(* (lower-bound a) (lower-bound b))))
	((and (negative? (lower-bound a))
	      (negative? (upper-bound a))
	      (positive? (lower-bound b))
	      (positive? (upper-bound b)))
	 (make-interval (* (lower-bound a) (upper-bound b))
			(* (upper-bound a) (lower-bound b))))
	((and (negative? (lower-bound a))
	      (negative? (upper-bound a))
	      (negative? (lower-bound b))
	      (positive? (upper-bound b)))
	 (make-interval (* (lower-bound a) (upper-bound b))
			(* (lower-bound a) (lower-bound b))))
	((and (negative? (lower-bound a))
	      (negative? (upper-bound a))
	      (negative? (lower-bound b))
	      (negative? (upper-bound b)))
	 (make-interval (* (upper-bound a) (upper-bound b))
			(* (lower-bound a) (lower-bound b))))))

(display-interval (mul-interval interval-a interval-c))
(display-interval (mul-interval-aug interval-a interval-c))
